// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  discordId String   @unique
  username  String
  avatar    String?
  role      Role     @default(PLAYER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  availabilities Availability[]
  lineupSlots    LineupPlayer[]
  matchStats PlayerMatchStats[]
}

enum Role {
  PLAYER
  CO_MANAGER
  MANAGER
}

// === NOUVEAUX MODÈLES DE BASE POUR L'APPLICATION ===

// Enum pour le statut de présence
enum AvailabilityStatus {
  PRESENT
  ABSENT
  MAYBE
}

// Modèle pour les "organisateurs" de compétitions (Nouveau)
model CompetitionProvider {
  id   String @id @default(cuid())
  name String @unique // ex: "VPG France", "FVPA", "IFVPA"

  competitions Competition[]
}

// Modèle Competition (Version modifiée)
model Competition {
  id        String   @id @default(cuid())
  name      String   // ex: "Ligue 1", "Coupe de France"
  format    String   // "LIGUE" ou "COUPE"
  season    String   // ex: "Saison 1"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  provider   CompetitionProvider @relation(fields: [providerId], references: [id])
  providerId String

  matches Match[]
  teams     Team[]
}

model Match {
  id            String      @id @default(cuid())
  round         String?   
  matchDate     DateTime?
  isOurMatch    Boolean     @default(false) 

  // --- SCORE ---
  homeTeamScore Int?      
  awayTeamScore Int?

  // --- STATISTIQUES D'ÉQUIPE ---
  homeTeamPossession      Int? // en %
  awayTeamPossession      Int?

  homeTeamShots           Int?
  awayTeamShots           Int?

  homeTeamExpectedGoals   Float? // Buts attendus (xG)
  awayTeamExpectedGoals   Float?
  
  homeTeamPasses          Int?
  awayTeamPasses          Int?
  
  homeTeamTackles         Int?
  awayTeamTackles         Int?

  homeTeamTacklesCompleted Int? // Tacles réussis
  awayTeamTacklesCompleted Int?

  homeTeamInterceptions   Int?
  awayTeamInterceptions   Int?
  
  homeTeamSaves           Int? // Arrêts du gardien
  awayTeamSaves           Int?
  
  homeTeamFouls           Int? // Fautes commises
  awayTeamFouls           Int?
  
  homeTeamOffsides        Int? // Hors-jeu
  awayTeamOffsides        Int?
  
  homeTeamCorners         Int?
  awayTeamCorners         Int?
  
  homeTeamFreeKicks       Int? // Coups francs
  awayTeamFreeKicks       Int?

  homeTeamPenalties       Int?
  awayTeamPenalties       Int?
  
  homeTeamYellowCards     Int? @default(0)
  awayTeamYellowCards     Int? @default(0)

  // --- RELATIONS ---

  homeTeam      Team          @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId    String
  awayTeam      Team          @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId    String
   
  competition   Competition?  @relation(fields: [competitionId], references: [id])
  competitionId String?
  session       Session?      @relation(fields: [sessionId], references: [id])
  sessionId     String?

  playerStats   PlayerMatchStats[] 
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt  
}

// Modèle pour les Sessions de jeu
model Session {
  id        String   @id @default(cuid())
  startTime DateTime
  endTime   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  matches        Match[]
  availabilities Availability[]
  lineup         LineupPlayer[]
}

// Modèle pour lier un Utilisateur à une Session (sa présence)
model Availability {
  id     String             @id @default(cuid())
  status AvailabilityStatus

  user   User   @relation(fields: [userId], references: [id])
  userId String

  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  @@unique([userId, sessionId])
}

// Enum pour le statut d'un joueur dans la compo
enum LineupStatus {
  TITULAIRE
  REMPLACANT
}

// Modèle qui représente un joueur dans la composition pour une session
model LineupPlayer {
  id        String       @id @default(cuid())
  position  String       // ex: "MOC", "DG", "BU"
  status    LineupStatus // TITULAIRE ou REMPLACANT

  // Relation avec l'utilisateur
  user      User    @relation(fields: [userId], references: [id])
  userId    String

  // Relation avec la session
  session   Session @relation(fields: [sessionId], references: [id])
  sessionId String

  // On s'assure qu'un joueur ne peut avoir qu'une seule place par session
  @@unique([userId, sessionId])
}

model Team {
  id   String @id @default(cuid())
  name String @unique

  // Une équipe peut jouer plusieurs matchs à domicile et à l'extérieur
  homeMatches  Match[] @relation("HomeTeam")
  awayMatches  Match[] @relation("AwayTeam")

  // Une équipe peut participer à plusieurs compétitions
  competitions Competition[]
}

model PlayerMatchStats {
  id        String  @id @default(cuid())

  // Liens
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  match     Match   @relation(fields: [matchId], references: [id])
  matchId   String

  // --- Données brutes saisies par le manager ---
  positionPlayed      String
  rating              Float?
  isManOfTheMatch     Boolean @default(false)

  // Stats Offensives
  goals               Int     @default(0)
  assists             Int     @default(0)
  shots               Int     @default(0)
  shotSuccessRate     Float?  // Précision des tirs (%)
  dribblesAttempted   Int     @default(0)
  dribbleSuccessRate  Float?

  // Stats de Construction
  passesAttempted     Int     @default(0)
  passSuccessRate     Float?

  // Stats Défensives
  tacklesAttempted    Int     @default(0)
  tackleSuccessRate   Float?
  ballsRecovered      Int     @default(0)

  // Stats Gardien
  saves               Int     @default(0)

  // Stats négatives
  offsides            Int     @default(0)

  // --- Données calculées et stockées par le backend ---
  shotsOnTarget       Int     @default(0)
  passesCompleted     Int     @default(0)
  dribblesCompleted   Int     @default(0)
  tacklesCompleted    Int     @default(0)
  performanceScore    Float   @default(0)

  @@unique([userId, matchId])
}